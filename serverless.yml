frameworkVersion: ">=1.15.1 <2.0.0"
service: "${self:provider.environment.SERVICE}"

# Custom variables
custom:
  stage: "${opt:stage, self:provider.stage}"
  babelPresets:
    - env
  s3Bucket: ${self:provider.environment.S3_BUCKET}
  # cognitoIdentityPoolId:
  #   Ref: CognitoIdentityPool
  # cognitoIdentityPoolArn: arn:aws:cognito-identity:${self:provider.environment.REGION}:${self:provider.environment.ACCOUNT_ID}:identitypool/${self:custom.cognitoIdentityPoolId.Ref}

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  stage: dev
  runtime: nodejs6.10
  environment: ${file(./env.yml):${self:custom.stage}}
  region: ${self:provider.environment.REGION}
  profile: ${self:provider.environment.PROFILE}
  timeout: 30
  memorySize: 128

  iamRoleStatements: # Permissions for all of your functions can be set here
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:GetObjectVersion
        - s3:PutObject
        - s3:DeleteObject
      Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
    # - Effect: Allow
    #   Action:
    #     - cognito-identity:*
    #   Resource: ${self:custom.cognitoIdentityPoolArn}

functions:
  # Auth function in front of Cognito
  # auth:
  #   handler: auth.handler
  #   memorySize: 128
  #   authorizerSettings:
  #     resultTtlInSeconds: 30
  #     identityValidationExpression: .*

  # Admin
  # -------------------------------------------------------
  admin:
    handler: lambda/admin.handler
    events:
      - http:
          path: admin
          method: get
          cors: true
          authorizer: aws_iam
          # authorizer: ${self:custom.cognitoAuthorizer.arn}

# The `Resources` your `Functions` use.  Raw AWS CloudFormation goes in here.
resources:
  Resources:
    ## S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        # AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    # CognitoIdentityPool:
    #   Type: AWS::Cognito::IdentityPool
    #   Properties:
    #     IdentityPoolName: TheIdentityPool
    #     AllowUnauthenticatedIdentities: true
    #     # SupportedLoginProviders:

  # Outputs:
  #   IdentityPoolId:
  #     Description: 'Cognito'
  #     Value:
  #       'Fn::GetAtt': [ CognitoIdentityPool, IdentityPoolId ]

plugins:
  # - serverless-babel-plugin
  - serverless-single-page-app-plugin

package:
  exclude:
    - package.json
    - tmp/**
    - .git/**
  include:
    - lib/**
    - node_modules
