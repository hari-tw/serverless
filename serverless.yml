# ********************************************
# LIGHT VERSION
# CognitoIdentityPool
# ********************************************

frameworkVersion: ">=1.15.3 <2.0.0"
service: "${self:provider.environment.SERVICE}"

# Custom variables
custom:
  stage: "${opt:stage, self:provider.stage}"
  babelPresets:
    - env
  s3Bucket: ${self:provider.environment.S3_BUCKET}
  cognitoIdentityPoolId:
    Ref: CognitoIdentityPool

# The `provider` block defines where your service will be deployed
# ===================================================================
provider:
  name: aws
  stage: dev
  runtime: nodejs6.10
  environment: ${file(./serverless.env.yml):${self:custom.stage}}
  region: ${self:provider.environment.REGION}
  profile: ${self:provider.environment.PROFILE}
  timeout: 30
  memorySize: 128
  versionFunctions: true
  role: GlobalRole
  # vpc:
  #   securityGroupIds:
  #     - "Fn::GetAtt": ServerlessSecurityGroup.GroupId
  #   subnetIds:
  #     - Ref: ServerlessSubnetA
  #     - Ref: ServerlessSubnetB
  #     - Ref: ServerlessSubnetC

# The `Functions` you want to deploy
# ===================================================================
functions:
  # Admin
  # -------------------------------------------------------
  admin:
    handler: lambda/admin.handler
    events:
      - http:
          path: admin
          method: get
          integration: lambda
          cors: true
            # origin: '*'
            # headers:
            #   - Content-Type
            #   - X-Amz-Date
            #   - Authorization
            #   - X-Api-Key
            #   - X-Amz-Security-Token
            #   - X-Amz-User-Agent
            #   - Access-Control-Allow-Origin
          authorizer: aws_iam
          # response:
          #   headers:
          #     Content-Type: "'application/json'"
          #   statusCodes:
          #       200:
          #           pattern: '' # Default response method


# The `Resources` your `Functions` use.  Raw AWS CloudFormation goes in here.
resources:
  Description: ${self:service} [${self:provider.environment.STAGE}] template
  Resources:
    ## VPC
    # ServerlessVPC:
    #   Type: AWS::EC2::VPC
    #   Properties:
    #     CidrBlock: "10.0.0.0/16"
    #     Tags:
    #     - Key: Name
    #       Value: "${self:service}-${self:provider.stage}"
    # ServerlessSubnetA:
    #   DependsOn: ServerlessVPC
    #   Type: AWS::EC2::Subnet
    #   Properties:
    #     VpcId:
    #       Ref: ServerlessVPC
    #     AvailabilityZone: ${self:provider.region}a
    #     CidrBlock: "10.0.0.0/24"
    #     Tags:
    #     - Key: Name
    #       Value: "${self:service}-${self:provider.stage}-a"
    # ServerlessSubnetB:
    #   DependsOn: ServerlessVPC
    #   Type: AWS::EC2::Subnet
    #   Properties:
    #     VpcId:
    #       Ref: ServerlessVPC
    #     AvailabilityZone: ${self:provider.region}b
    #     CidrBlock: "10.0.1.0/24"
    #     Tags:
    #     - Key: Name
    #       Value: "${self:service}-${self:provider.stage}-b"
    # ServerlessSubnetC:
    #   DependsOn: ServerlessVPC
    #   Type: AWS::EC2::Subnet
    #   Properties:
    #     VpcId:
    #       Ref: ServerlessVPC
    #     AvailabilityZone: ${self:provider.region}c
    #     CidrBlock: "10.0.2.0/24"
    #     Tags:
    #     - Key: Name
    #       Value: "${self:service}-${self:provider.stage}-c"
    # ServerlessSecurityGroup:
    #   DependsOn: ServerlessVPC
    #   Type: AWS::EC2::SecurityGroup
    #   Properties:
    #     GroupDescription: SecurityGroup for Serverless Functions
    #     VpcId:
    #       Ref: ServerlessVPC
    #     Tags:
    #     - Key: Name
    #       Value: "${self:service}-${self:provider.stage}-serverless"

    ## Cognito
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: "${self:provider.environment.COGNITO_IDENTITY_POOL}"
        AllowUnauthenticatedIdentities: false
        SupportedLoginProviders:
          "graph.facebook.com": ${self:provider.environment.FACBOOK_APP_ID}
          # "api.twitter.com": "MyTwitterConsumerKey;MyTwitterConsumerSecret"

    CognitoIdentityPoolRoleAttachment:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        # RoleMappings:
        #   "graph.facebook.com":
        #     Type: Token
        #     AmbiguousRoleResolution: 'AuthenticatedRole'
        Roles:
          authenticated:
            "Fn::GetAtt": [ AuthenticatedRole, Arn ]
          # unauthenticated:
          #   "Fn::GetAtt": [ UnauthenticatedRole, Arn ]

    AuthenticatedRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${self:service}-authenticated-role"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: 'Allow'
              Principal:
                Federated:
                  - "cognito-identity.amazonaws.com"
              Action:
                - sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud:
                    Ref: CognitoIdentityPool
                  # arn:aws:cognito-identity:${self:provider.region}:${self:provider.environment.ACCOUNT_ID}:identitypool/*
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: 'authenticated'

    # UnauthenticatedRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: "${self:service}-unauthenticated-role"
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         -
    #           Effect: 'Allow'
    #           Principal:
    #             Federated:
    #               - "cognito-identity.amazonaws.com"
    #           Action:
    #             - sts:AssumeRoleWithWebIdentity
    #           Condition:
    #             StringEquals:
    #               cognito-identity.amazonaws.com:aud:
    #                 Ref: CognitoIdentityPool
    #             ForAnyValue:StringLike:
    #               cognito-identity.amazonaws.com:amr: 'unauthenticated'


    ## Role
    GlobalRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${self:service}-lambda-role"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - apigateway.amazonaws.com # <<< CHANGED
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        Policies:
          - PolicyName: "${self:service}-lambda-policy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                # Logs
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:${self:provider.region}:${self:provider.environment.ACCOUNT_ID}:log-group:/aws/lambda/*:*:*
                # S3
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:GetObjectVersion
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource:
                    - arn:aws:s3:::${self:custom.s3Bucket}/*
                # Cognito
                - Effect: Allow
                  Action:
                    - cognito-identity:*
                    - cognito-idp:*
                  Resource: arn:aws:cognito-identity:${self:provider.region}:${self:provider.environment.ACCOUNT_ID}:identitypool/*
                # DynamoDB
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:*

                # ApiGateway
                # - Effect: Allow
                #   Action:
                #     - apigateway:GET
                #     - apigateway:POST
                #     - apigateway:PUT
                #     - apigateway:PATCH
                #     - apigateway:DELETE
                #   Resource: arn:aws:apigateway:${self:provider.region}::*

                # - Effect: Deny
                #   Action:
                #     - apigateway:OPTIONS
                #   Resource: "*"
                  # Resource: arn:aws:apigateway:${self:provider.region}::*

                # Others
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                    - ses:SendEmail
                    - iam:CreateRole
                    - iam:PutRolePolicy
                    - sts:AssumeRole
                    - lambda:InvokeFunction
                    - execute-api:Invoke
                  Resource: "*"

  Outputs:
    CognitoIdentityPoolId:
      Description: 'Cognito'
      Value:
        Ref: CognitoIdentityPool

plugins:
  # - serverless-babel-plugin
  - serverless-single-page-app-plugin
  - serverless-plugin-stack-outputs

package:
  exclude:
    - package.json
    - tmp
    - .git
  include:
    - lib
    - node_modules
