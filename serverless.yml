# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice
frameworkVersion: ">=1.15.1 <2.0.0"

# The `service` block is the name of the service
service: serverlabs

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  # SYSTEM_NAME: ${self:service}
  environment: ${file(env.yml):${self:custom.stage}}
  runtime: nodejs6.10
  stage: dev
  profile: ${self:custom.profiles.${self:custom.stage}}
  region: us-west-2
  timeout: 5
  memorySize: 128
  versionFunctions: true
  stackTags: # Optional CF stack tags
    key: sless
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:*"

# The `Functions` you want to deploy
functions:
  # Users
  # -------------------------------------------------------
  usersCreate:
    handler: lambda/users.create
    # The `events` block defines how to trigger the handler
    events:
      - http:
          path: users
          method: post
          cors: true
    tags:
      stage: ${self:custom.stage}
      resource: users

  usersGet:
    handler: lambda/users.update
    timeout: 10
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
    tags:
      stage: ${self:custom.stage}
      resource: users

  usersList:
    handler: lambda/users.update
    timeout: 10
    events:
      - http:
          path: users
          method: get
          cors: true
    tags:
      stage: ${self:custom.stage}
      resource: users

  usersUpdate:
    handler: lambda/users.update
    timeout: 10
    events:
      - http:
          path: users/{id}
          method: put
          cors: true
    tags:
      stage: ${self:custom.stage}
      resource: users

  usersDelete:
    handler: lambda/users.update
    timeout: 10
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true
    tags:
      stage: ${self:custom.stage}
      resource: users

# The `Resources` your `Functions` use.  Raw AWS CloudFormation goes in here.
resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.TABLE_USERS}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

# Custom variables
custom:
  stage: "${opt:stage, self:provider.stage}"
  profiles:
    dev: development
    prod: production
  babelPresets:
    - latest

plugins:
  - serverless-babel-plugin

package:
  include:
    - lib/**
  exclude:
    - tmp/**
    - .git/**
