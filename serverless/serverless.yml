# ********************************************
# LIGHT VERSION
# CognitoIdentityPool
# ********************************************

frameworkVersion: '>=1.15.3 <2.0.0'
service: '${self:provider.environment.SERVICE}'

# Custom variables
# ===================================================================
custom:
  stage: '${opt:stage, self:provider.stage}'
  babelPresets:
    - env
  s3Bucket: ${self:provider.environment.S3_BUCKET}
  cognitoIdentityPoolId:
    Ref: CognitoIdentityPool

# The `provider` block defines where your service will be deployed
# ===================================================================
provider:
  name: aws
  stage: dev
  runtime: nodejs6.10
  environment: ${file(./serverless.env.yml):${self:custom.stage}}
  region: ${self:provider.environment.REGION}
  profile: ${self:provider.environment.PROFILE}
  timeout: 30
  memorySize: 128
  versionFunctions: true
  role: GlobalRole

# The `Functions` you want to deploy
# ===================================================================
functions:
  # Admin
  # -------------------------------------------------------
  admin:
    handler: lambda/admin.handler
    events:
      - http:
          path: admin
          method: get
          cors: true
          authorizer: aws_iam
          integration: lambda

# The `Resources` your `Functions` use.  Raw AWS CloudFormation goes in here.
resources:
  Description: ${self:service} [${self:provider.environment.STAGE}] template
  Resources:
    ## Cognito
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:provider.environment.COGNITO_IDENTITY_POOL}
        AllowUnauthenticatedIdentities: false
        SupportedLoginProviders:
          'graph.facebook.com': ${self:provider.environment.FACBOOK_APP_ID}

    CognitoIdentityPoolRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            'Fn::GetAtt': [ AuthenticatedRole, Arn ]
          # unauthenticated:
          #   'Fn::GetAtt': [ UnauthenticatedRole, Arn ]

    AuthenticatedRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: '${self:service}-authenticated-role'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: 'Allow'
              Principal:
                Federated:
                  - 'cognito-identity.amazonaws.com'
              Action:
                - sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud:
                    Ref: CognitoIdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: 'authenticated'
        Path: '/'
        Policies:
          - PolicyName: '${self:service}-cognito-authenticated-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: 'Allow'
                  Action:
                    - execute-api:Invoke
                  Resource: arn:aws:execute-api:${self:provider.region}:${self:provider.environment.ACCOUNT_ID}:*/*

    ## Role
    GlobalRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: '${self:service}-lambda-role'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - apigateway.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        Policies:
          - PolicyName: '${self:service}-lambda-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                # Logs
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:${self:provider.region}:${self:provider.environment.ACCOUNT_ID}:log-group:/aws/lambda/*:*:*
                # S3
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:GetObjectVersion
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource:
                    - arn:aws:s3:::${self:custom.s3Bucket}/*
                # Cognito
                - Effect: Allow
                  Action:
                    - cognito-identity:*
                    - cognito-idp:*
                  Resource: arn:aws:cognito-identity:${self:provider.region}:${self:provider.environment.ACCOUNT_ID}:identitypool/*
                # DynamoDB
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:*
                # Others
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                    - ses:SendEmail
                    - iam:CreateRole
                    - iam:PutRolePolicy
                    - sts:AssumeRole
                    - lambda:InvokeFunction
                    - execute-api:Invoke
                  Resource: '*'

  Outputs:
    CognitoIdentityPoolId:
      Description: 'CognitoIdentityPoolId'
      Value:
        Ref: CognitoIdentityPool

plugins:
  # - serverless-babel-plugin
  - serverless-single-page-app-plugin
  - serverless-plugin-stack-outputs

package:
  exclude:
    - package.json
    - tmp
    - .git
  include:
    - lib
    - node_modules
