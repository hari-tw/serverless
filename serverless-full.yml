# ********************************************
# FULL VERSION
# CognitoIdentityPool + S3 + DyanmoDB
# ********************************************

frameworkVersion: ">=1.15.1 <2.0.0"
service: "${self:provider.environment.SERVICE}"

# Custom variables
# ===================================================================
custom:
  stage: "${opt:stage, self:provider.stage}"
  babelPresets:
    - env
  s3Bucket: ${self:provider.environment.S3_BUCKET}
  cognitoIdentityPoolId:
    Ref: CognitoIdentityPool

# The `provider` block defines where your service will be deployed
# ===================================================================
provider:
  name: aws
  stage: dev
  runtime: nodejs6.10
  environment: ${file(./serverless.env.yml):${self:custom.stage}}
  region: ${self:provider.environment.REGION}
  profile: ${self:provider.environment.PROFILE}
  timeout: 30
  memorySize: 128
  versionFunctions: true
  vpc:
    securityGroupIds:
      - "Fn::GetAtt": ServerlessSecurityGroup.GroupId
    subnetIds:
      - Ref: ServerlessSubnetA
      - Ref: ServerlessSubnetB
      - Ref: ServerlessSubnetC

  stackTags: # Optional CF stack tags
    key: 'sless'
  stackPolicy: # Optional CF stack policy. It allows updates to all resources except deleting/replacing DynamoDB Table (use with caution!)
    - Effect: Allow
      Principal: "*"
      Action: "Update:*"
      Resource: "*"
    - Effect: Deny
      Principal: "*"
      Action:
        - Update:Replace
        - Update:Delete
      Condition:
        StringEquals:
          ResourceType:
            - AWS::DynamoDB::Table

# The `Functions` you want to deploy
# ===================================================================
functions:
  public:
    handler: lambda/public.public
    events:
      - http:
          method: get
          path: "/"
      - http:
          method: get
          path: "how-it-works"
      - http:
          method: get
          path: "about"
      - http:
          method: get
          path: "contact"
      - schedule:
          rate: rate(15 minutes)
          enabled: ${self:provider.environment.WARMUP}
      - http:
          method: get
          path: "{anything}"
      - http:
          method: post
          path: "{anything}"
      - http:
          method: put
          path: "{anything}"
      - http:
          method: patch
          path: "{anything}"

  # Admin
  # -------------------------------------------------------
  admin:
    handler: lambda/admin.handler
    events:
      - http:
          path: admin
          method: get
          cors: true
          authorizer: aws_iam
    # warmup: true

  # Users
  # -------------------------------------------------------
  usersCreate:
    handler: lambda/users.create
    events:
      - http:
          path: users
          method: post
          cors: true
    tags:
      stage: ${self:custom.stage}
      resource: users

  usersGet:
    handler: lambda/users.get
    timeout: 10
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
    tags:
      stage: ${self:custom.stage}
      resource: users

  usersUpdate:
    handler: lambda/users.update
    timeout: 10
    events:
      - http:
          path: users/{id}
          method: post
          cors: true
    tags:
      stage: ${self:custom.stage}
      resource: users

  usersDelete:
    handler: lambda/users.delete
    timeout: 10
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true
    tags:
      stage: ${self:custom.stage}
      resource: users

  usersList:
    handler: lambda/users.list
    timeout: 10
    events:
      - http:
          path: users
          method: get
          cors: true
    tags:
      stage: ${self:custom.stage}
      resource: users

# The `Resources` your `Functions` use.
# Raw AWS CloudFormation goes in here.
# ===================================================================
resources:
  Resources:
    ## VPC
    ServerlessVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
        Tags:
        - Key: Name
          Value: "${self:service}-${self:provider.stage}"
    ServerlessSubnetA:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.0.0/24"
        Tags:
        - Key: Name
          Value: "${self:service}-${self:provider.stage}-a"
    ServerlessSubnetB:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: "10.0.1.0/24"
        Tags:
        - Key: Name
          Value: "${self:service}-${self:provider.stage}-b"
    ServerlessSubnetC:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}c
        CidrBlock: "10.0.2.0/24"
        Tags:
        - Key: Name
          Value: "${self:service}-${self:provider.stage}-c"
    ServerlessSecurityGroup:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: ServerlessVPC
        Tags:
        - Key: Name
          Value: "${self:service}-${self:provider.stage}-serverless"

    ## DynamoDB
    UsersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: "${self:provider.environment.TABLE_USERS}"
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ## S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    ## S3 Bucket Policies to allow all files inside the Bucket to be avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*

    ## CloudFront Distribution to serve the Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: "S3-${self:custom.s3Bucket}"
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
          Enabled: 'true'
          ## Uncomment the following section in case you are using a custom domain
          # Aliases:
          # - mysite.example.com
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, style.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            ## The origin id defined above
            TargetOriginId: "S3-${self:custom.s3Bucket}"
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: ${sef:service}-logs.s3.amazonaws.com
          #   Prefix: ${sef:service}

    ## Cognito
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: "${self:provider.environment.COGNITO_IDENTITY_POOL}"
        AllowUnauthenticatedIdentities: false
        # SupportedLoginProviders:

    ## Role
    GlobalRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${self:service}-lambda-role"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        Policies:
          - PolicyName: "${self:service}-lambda-policy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                # Logs
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:${self:provider.region}:${self:provider.environment.ACCOUNT_ID}:log-group:/aws/lambda/*:*:*
                # S3
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:GetObjectVersion
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource:
                    - arn:aws:s3:::${self:custom.s3Bucket}/*
                # Cognito
                - Effect: Allow
                  Action:
                    - cognito-identity:*
                    - cognito-idp:*
                  Resource: arn:aws:cognito-identity:${self:provider.region}:${self:provider.environment.ACCOUNT_ID}:identitypool/*
                # DynamoDB
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:*
                # Others
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                    - ses:SendEmail
                    - iam:CreateRole
                    - iam:PutRolePolicy
                    - sts:AssumeRole
                    - lambda:InvokeFunction
                  Resource: "*"

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    # UsersTableArn:
    #   Description: The ARN for the User's Table
    #   Value:
    #     "Fn::GetAtt": [ usersTable, Arn ]
    #   Export:
    #     Value: ${self:service}:${self:custom.stage}:UsersTableArn # see Fn::ImportValue to use in other services and http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html for documentation on use.
    WebAppCloudFrontDistributionUri:
      Description: 'CloudFront Uri'
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]
    CognitoIdentityPoolId:
      Description: 'Cognito'
      Value:
        Ref: CognitoIdentityPool

# Plugins
# ===================================================================
plugins:
  # - serverless-babel-plugin
  - serverless-single-page-app-plugin
  - serverless-plugin-stack-outputs

# Package
# ===================================================================
package:
  exclude:
    - package.json
    - tmp
    - .git
  include:
    - lib
    - node_modules
