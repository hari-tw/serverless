frameworkVersion: ">=1.15.3 <2.0.0"
service: "${self:provider.environment.SERVICE}"

# Custom variables
custom:
  stage: "${opt:stage, self:provider.stage}"
  babelPresets:
    - env
  s3Bucket: ${self:provider.environment.S3_BUCKET}
  # cognitoIdentityPoolId: ${cf:${self:service}.CognitoIdentityPool}
  cognitoIdentityPoolId:
    Ref: CognitoIdentityPool

  # cognitoIdentityPoolId: ${self:resources.Outputs.CognitoIdentityPoolId.Value}
  # cognitoIdentityPoolArn: arn:aws:cognito-identity:${self:provider.environment.REGION}:${self:provider.environment.ACCOUNT_ID}:identitypool/${self:custom.cognitoIdentityPoolId.Value}

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  stage: dev
  runtime: nodejs6.10
  environment: ${file(./serverless.env.yml):${self:custom.stage}}
  region: ${self:provider.environment.REGION}
  profile: ${self:provider.environment.PROFILE}
  timeout: 30
  memorySize: 128

  iamRoleStatements: # Permissions for all of your functions can be set here
    # - Effect: Allow
    #   Action:
    #     - s3:GetObject
    #     - s3:GetObjectVersion
    #     - s3:PutObject
    #     - s3:DeleteObject
    #   Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
    - Effect: Allow
      Action:
        - cognito-identity:*
      # Resource:
      #   Fn::Join:
      #     - ''
      #     - - 'arn:aws:cognito-identity:'
      #       - ${self:provider.environment.REGION}:${self:provider.environment.ACCOUNT_ID}:identitypool/
      #       - Ref: CognitoIdentityPool
      #       - ${self:service}:${self:provider.environment.STAGE}:CognitoIdentityPoolId
      # Resource: arn:aws:cognito-identity:${self:provider.environment.REGION}:${self:provider.environment.ACCOUNT_ID}:identitypool/${self:custom.cognitoIdentityPoolId.IdentityPoolId}
      # Resource: ${self:custom.cognitoIdentityPoolArn}
      Resource: arn:aws:cognito-identity:${self:provider.environment.REGION}:${self:provider.environment.ACCOUNT_ID}:identitypool/*

functions:
  # Admin
  # -------------------------------------------------------
  admin:
    handler: lambda/admin.handler
    events:
      - http:
          path: admin
          method: get
          cors: true
          # authorizer: aws_iam
          # authorizer: ${self:custom.cognitoAuthorizer.arn}

# The `Resources` your `Functions` use.  Raw AWS CloudFormation goes in here.
resources:
  Description: ${self:provider.environment.SERVICE} [${self:provider.environment.STAGE}] template
  Resources:
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: TheIdentityPool
        AllowUnauthenticatedIdentities: true
        # SupportedLoginProviders:

  Outputs:
    CognitoIdentityPoolId:
      Description: 'Cognito'
      Value:
        Ref: CognitoIdentityPool
      # Value:
      #   'Fn::GetAtt': [ CognitoIdentityPool, IdentityPoolId ]
      # Export:
      #   Name: CognitoIdentityPoolId
      #   Value:
      #     'Fn::GetAtt': [ CognitoIdentityPool, IdentityPoolId ]
        # CognitoIdentityPoolId: ${self:service}:${self:provider.environment.STAGE}:CognitoIdentityPoolId
  #       # : ${self:service}:${self:provider.environment.STAGE}:CognitoIdentityPoolId

plugins:
  # - serverless-babel-plugin
  - serverless-single-page-app-plugin
  - serverless-plugin-stack-outputs

package:
  exclude:
    - package.json
    - tmp/**
    - .git/**
  include:
    - lib/**
    - node_modules
